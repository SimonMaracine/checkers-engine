#! /usr/bin/env python3

import sys
import argparse

from comparator import comparator
from comparator import error
from comparator import data

# https://docs.python.org/3/library/argparse.html


def main(args: list[str]) -> int:
    try:
        parser = argparse.ArgumentParser(description="Compare the strength of two checkers engines")
        subparsers = parser.add_subparsers()

        compare_parser = subparsers.add_parser("compare", help="Manage a match or series of matches played by two engines")
        compare_parser.add_argument("match_file", help="Match file describing the positions and other options")
        compare_parser.add_argument("path_black", help="File path to the engine playing as black")
        compare_parser.add_argument("path_white", help="File path to the engine playing as white")
        compare_parser.set_defaults(function=compare)

        replay_parser = subparsers.add_parser("replay", help="Extract a replay file out of a match report file")
        replay_parser.add_argument("report_file", help="Report file previously generated by this program")
        replay_parser.add_argument("match", help="Expression describing the match to be extracted")
        replay_parser.add_argument("index", help="Expression describing the index of the round to be extracted", type=int)
        replay_parser.set_defaults(function=replay)

        arguments = parser.parse_args(args[1:])
        return arguments.function(arguments)
    except KeyboardInterrupt:
        return 1


def compare(arguments: argparse.Namespace) -> int:
    try:
        match_file = comparator.parse_match_file(arguments.match_file)
    except error.ComparatorError as err:
        print(f"Could not parse match file: {err}", file=sys.stderr)
        return 1

    try:
        comparator.run_match(match_file, arguments.path_black, arguments.path_white)
    except error.ComparatorError as err:
        print(f"An error occurred during the process: {err}", file=sys.stderr)
        return 1

    return 0


def replay(arguments: argparse.Namespace) -> int:
    try:
        data.extract_replay_file(arguments.report_file, arguments.match, arguments.index)
    except data.DataError as err:
        print(f"Could not extract the replay file from report: {err}", file=sys.stderr)
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
